Project startup steps----------------------------------------------------

PS C:\Users\arowo\OneDrive\Documents\PLP-Contents\Database Class\Database-Week-8-Final-Project> nmp init -y
nmp : The term 'nmp' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the 
name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ ~~~
    + CategoryInfo          : ObjectNotFound: (nmp:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 
PS C:\Users\arowo\OneDrive\Documents\PLP-Contents\Database Class\Database-Week-8-Final-Project> npm init -y
Wrote to C:\Users\arowo\OneDrive\Documents\PLP-Contents\Database Class\Database-Week-8-Final-Project\package.json:

{
  "name": "database-week-8-final-project",
  "version": "1.0.0",
  "main": "database.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
}



PS C:\Users\arowo\OneDrive\Documents\PLP-Contents\Database Class\Database-Week-8-Final-Project> npm install mysql2

added 13 packages, and audited 14 packages in 31s
1 package is looking for funding
  run `npm fund` for details

found 0 vulnerabilities
PS C:\Users\arowo\OneDrive\Documents\PLP-Contents\Database Class\Database-Week-8-Final-Project> npm install cors

added 3 packages, and audited 17 packages in 25s

  run `npm fund` for details

PS C:\Users\arowo\OneDrive\Documents\PLP-Contents\Database Class\Database-Week-8-Final-Project> mysql -u root -p -e "CREATE USER 'fooduserEnter password: ************
PS C:\Users\arowo\OneDrive\Documents\PLP-Contents\Database Class\Database-Week-8-Final-Project>
>> mysql -u root -p -e "GRANT ALL PRIVILEGES ON food_hub.* TO 'fooduser'@'localhost';"
Enter password: ************
PS C:\Users\arowo\OneDrive\Documents\PLP-Contents\Database Class\Database-Week-8-Final-Project> node server.js
C:\Users\arowo\OneDrive\Documents\PLP-Contents\Database Class\Database-Week-8-Final-Project\server.js:14
app.use(cors());
^

ReferenceError: app is not defined
    at Object.<anonymous> (C:\Users\arowo\OneDrive\Documents\PLP-Contents\Database Class\Database-Week-8-Final-Project\server.js:14:1)    
    at Module._compile (node:internal/modules/cjs/loader:1358:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1416:10)
    at Module.load (node:internal/modules/cjs/loader:1208:32)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)
    at node:internal/main/run_main_module:28:49

Node.js v20.14.0
PS C:\Users\arowo\OneDrive\Documents\PLP-Contents\Database Class\Database-Week-8-Final-Project> npm install express

added 64 packages, and audited 81 packages in 9s
14 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
PS C:\Users\arowo\OneDrive\Documents\PLP-Contents\Database Class\Database-Week-8-Final-Project> node server.js
DB Connected!



------------------------------------------RESGISTRATION $ LOGIN----------------------------------
when you set the registration and login package
install bcrypt npm install bcrypt
define the bcrypt object in server.js


This is to pass the rquest to the server
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

LOGIN FEATURES
Enable session Management
-npm install express-session
// Set up session management
app.use(session({
    secret: 'your-secret-key', // Replace with a strong secret key
    resave: false,
    saveUninitialized: true,
    cookie: { secure: true } // Set to true if using HTTPS
}));


Set Up Json web token
npm install jsonwebtoken// This package provides methods for signing and verifying JWTs.

const jwt = require('jsonwebtoken');
const SECRET_KEY = 'victorhubapp07#'; // Replace with a strong secret key



Authenticate the token
//authentication middleare that performs validation of the token
function authenticateToken(req, res, next) {
    const token = req.headers['authorization']?.split(' ')[1]; // Expecting "Bearer <token>"

    if (!token) return res.status(401).json({ message: 'Access token required' });

    console.log('Token received:', token);  // Log the token for debugging

    jwt.verify(token, SECRET_KEY, (err, decoded) => {
        if (err) return res.status(403).json({ message: 'Invalid token' });

        // Check if it's an admin or a patient
        if (decoded.role) {
            // It's an admin, role is available
            req.user = { id: decoded.id, role: decoded.role };
        } else {
            // It's a patient, only id is available
            req.user = { id: decoded.id };
        }

        next();  // Proceed to the next middleware/route handler
    });
}


----------------------------------------USE SSL------------------------------------
To make your Node.js project run on HTTPS in Visual Studio Code, you need to set up SSL certificates and configure the HTTPS server. Here's a step-by-step guide:

1. Obtain SSL Certificates
You need two files:

Private Key (key.pem or similar)
Certificate (cert.pem or similar)
Options to Get Certificates:
Self-signed certificates: Generate them for development purposes.
Certificate Authority (CA): Use trusted certificates for production (e.g., Let's Encrypt).
Generating Self-Signed Certificates:
Run the following command to create a self-signed certificate:

bash
Copy code
openssl req -nodes -new -x509 -keyout key.pem -out cert.pem -days 365
Follow the prompts to fill out the certificate information.

2. Update Your Node.js Code
Below is an example of how to set up an HTTPS server in your project:

javascript
Copy code
const https = require('https'); // Import HTTPS module
const fs = require('fs'); // Import File System module
const express = require('express'); // Example with Express.js

const app = express();

// Load SSL certificate and key
const options = {
  key: fs.readFileSync('path/to/key.pem'), // Path to private key
  cert: fs.readFileSync('path/to/cert.pem'), // Path to certificate
};

// Define a sample route
app.get('/', (req, res) => {
  res.send('Hello, HTTPS!');
});

// Create HTTPS server
https.createServer(options, app).listen(3000, () => {
  console.log('HTTPS Server running on https://localhost:3000');
});
3. Place SSL Files in Your Project
Save key.pem and cert.pem in your project folder (e.g., in a directory named ssl).
Update the file paths in fs.readFileSync() accordingly:
javascript
Copy code
const options = {
  key: fs.readFileSync('./ssl/key.pem'),
  cert: fs.readFileSync('./ssl/cert.pem'),
};
4. Run Your Project
Start your server:
bash
Copy code
node app.js
Access it via:
arduino
Copy code
https://localhost:3000
